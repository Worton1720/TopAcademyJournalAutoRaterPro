export class AutoRater {
	constructor() {
		this.ratingSelector = '.bs-rating-star';
		this.activeClass = 'active';
		this.maxRating = 5;
		this.observer = null;
		this.retryAttempts = 3;
		this.retryDelay = 1000;
		this.pendingRetries = new Map();
		this.homeworkModalSelector = 'hw-upload-homework';
		this.isProcessing = false; // ‚Üê –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
		this.processedModals = new Set(); // ‚Üê –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ–¥–∞–ª–æ–∫
		this.init();
	}

	init() {
		this.setupMutationObserver();
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –î–ó
	 */
	isHomeworkModalOpen() {
		return document.querySelector(this.homeworkModalSelector) !== null;
	}

	/**
	 * –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
	 */
	setupMutationObserver() {
		this.observer = new MutationObserver(mutations => {
			mutations.forEach(mutation => {
				if (mutation.addedNodes.length > 0 && !this.isProcessing) {
					const modal = document.querySelector(this.homeworkModalSelector);
					if (modal && !this.processedModals.has(modal)) {
						console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –î–ó');
						this.isProcessing = true;
						this.processedModals.add(modal);

						setTimeout(() => {
							this.processHomework();
							this.isProcessing = false;
						}, 1000);
					}
				}
			});
		});

		this.observer.observe(document.body, {
			childList: true,
			subtree: true,
		});
	}

	/**
	 * –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
	 */
	processHomework() {
		console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –î–ó');

		// 1. –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		this.fillTimeSpent();

		// 2. –í—ã—Å—Ç–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
		this.rateMaximum();

		// 3. –í—ã–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ–≥–∏
		this.selectPositiveTags();
	}

	/**
	 * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó
	 */
	fillTimeSpent() {
		const timeInputs = document.querySelectorAll(
			'.text-homework-time-spent-wrap input'
		);

		if (timeInputs.length >= 2) {
			// –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∞—Å—ã (1-2 —á–∞—Å–∞)
			timeInputs[0].value = Math.floor(Math.random() * 2) + 1;

			// –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∏–Ω—É—Ç—ã (15-45 –º–∏–Ω—É—Ç)
			timeInputs[1].value = Math.floor(Math.random() * 31) + 15;

			console.log('‚è∞ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ó');
		}
	}

	/**
	 * –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ (5 –∑–≤—ë–∑–¥) —Å —Ü–∏–∫–ª–æ–º –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏
	 */
	rateMaximum() {
		const ratingContainers = document.querySelectorAll('.emoji-evaluation');

		ratingContainers.forEach(container => {
			const containerId = this.generateContainerId(container);

			if (this.pendingRetries.has(containerId)) {
				return;
			}

			const stars = container.querySelectorAll(this.ratingSelector);

			if (stars.length === this.maxRating) {
				const lastStar = stars[this.maxRating - 1];

				if (!lastStar.classList.contains(this.activeClass)) {
					console.log('‚≠ê –ö–ª–∏–∫–∞–µ–º –Ω–∞ 5-—é –∑–≤–µ–∑–¥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –î–ó');
					const clickSuccess = this.clickStar(lastStar);

					if (clickSuccess) {
						this.startRetryCycle(container, containerId, 0);
					}
				} else {
					console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ –î–ó —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º');
				}
			}
		});
	}

	/**
	 * –í—ã–±–æ—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
	 */
	selectPositiveTags() {
		console.log('üîç –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏...');
		const tagElements = document.querySelectorAll('.evaluation-tags-item');

		// –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		tagElements.forEach((tagElement, index) => {
			const tagText = tagElement.querySelector('span')?.textContent;
			const isVisible = this.isElementVisible(tagElement);
			const isSelected = tagElement.classList.contains('selected');
			console.log(
				`–¢–µ–≥ ${
					index + 1
				}: "${tagText}", –≤–∏–¥–∏–º: ${isVisible}, –≤—ã–±—Ä–∞–Ω: ${isSelected}`
			);
		});

		const positiveTags = ['–í—Å–µ –∫—Ä—É—Ç–æ!', '–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ!', '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è'];
		let selectedCount = 0;

		tagElements.forEach(tagElement => {
			if (!this.isElementVisible(tagElement)) return;

			const tagText = tagElement.querySelector('span')?.textContent;
			console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥: "${tagText}"`);

			if (tagText && positiveTags.includes(tagText)) {
				if (!tagElement.classList.contains('selected') && selectedCount < 2) {
					try {
						tagElement.click();
						console.log(`‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ–≥: "${tagText}"`);
						selectedCount++;
						return;
					} catch (error) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–≥–∞:', error);
					}
				}
			}
		});

		if (selectedCount === 0) {
			console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞');
		}
	}

	/**
	 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
	 */
	generateContainerId(container) {
		return Array.from(container.parentNode.children).indexOf(container);
	}

	/**
	 * –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏
	 */
	startRetryCycle(container, containerId, attempt) {
		if (attempt >= this.retryAttempts) {
			console.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –î–ó`);
			this.pendingRetries.delete(containerId);
			return;
		}

		console.log(
			`‚è≥ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ü–µ–Ω–∫–∏ –î–ó (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${
				this.retryAttempts
			})...`
		);

		this.pendingRetries.set(
			containerId,
			setTimeout(() => {
				this.checkRatingSuccess(container, containerId, attempt);
			}, this.retryDelay)
		);
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
	 */
	checkRatingSuccess(container, containerId, attempt) {
		const stars = container.querySelectorAll(this.ratingSelector);

		if (stars.length === 0) {
			console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ü–µ–Ω–∫–∏ –∏—Å—á–µ–∑–ª–∏');
			this.pendingRetries.delete(containerId);
			return;
		}

		const lastStar = stars[this.maxRating - 1];

		if (lastStar.classList.contains(this.activeClass)) {
			console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ –î–ó —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞!');
			this.pendingRetries.delete(containerId);
		} else {
			console.log('‚ùå –û—Ü–µ–Ω–∫–∞ –î–ó –Ω–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...');

			const clickSuccess = this.clickStar(lastStar);

			if (clickSuccess) {
				this.startRetryCycle(container, containerId, attempt + 1);
			} else {
				console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∑–≤–µ–∑–¥—É');
				this.pendingRetries.delete(containerId);
			}
		}
	}

	/**
	 * –ö–ª–∏–∫ –ø–æ –∑–≤–µ–∑–¥–µ
	 */
	clickStar(starElement) {
		if (
			this.isElementVisible(starElement) &&
			this.isElementClickable(starElement)
		) {
			try {
				const button = starElement.querySelector('button.rating-star');
				if (button) {
					button.click();
					return true;
				} else {
					starElement.click();
					return true;
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∑–≤–µ–∑–¥—É:', error);
				return false;
			}
		}
		return false;
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
	 */
	isElementVisible(element) {
		return (
			element &&
			element.offsetWidth > 0 &&
			element.offsetHeight > 0 &&
			window.getComputedStyle(element).visibility !== 'hidden' &&
			window.getComputedStyle(element).display !== 'none'
		);
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
	 */
	isElementClickable(element) {
		const style = window.getComputedStyle(element);
		return (
			style.pointerEvents !== 'none' &&
			style.cursor === 'pointer' &&
			!element.hasAttribute('disabled')
		);
	}

	/**
	 * –û—á–∏—Å—Ç–∫–∞
	 */
	cleanup() {
		if (this.observer) {
			this.observer.disconnect();
		}

		this.pendingRetries.forEach((timeoutId, containerId) => {
			clearTimeout(timeoutId);
			this.pendingRetries.delete(containerId);
		});
	}
}
