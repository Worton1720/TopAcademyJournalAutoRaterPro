// ==UserScript==
// @name         Top Academy Journal Auto Rater Pro
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏, –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–æ–¥—Å—á—ë—Ç–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
// @author       Rodion
// @match        https://journal.top-academy.ru/*
// @grant        none
// @updateURL    https://raw.githubusercontent.com/Worton1720/TopAcademyJournalAutoRaterPro/main/index.js
// @downloadURL  https://raw.githubusercontent.com/Worton1720/TopAcademyJournalAutoRaterPro/main/index.js
// ==/UserScript==

(function () {
	'use strict';

	/** –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ */
	const CONFIG = {
		ZOOM_LEVEL: '80%',
		TARGET_RATING: 5,
		NEXT_BUTTON_TEXTS: ['–î–∞–ª–µ–µ', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'],
		OBSERVER_CONFIG: {
			childList: true,
			subtree: true,
			attributes: true,
			attributeFilter: ['style', 'class'],
		},
		CHECK_INTERVAL: 1000,
		CLICK_DELAY: 100,
		PROGRESS_PAGE_REGEX:
			/https:\/\/journal\.top-academy\.ru\/.*\/main\/progress\/.*/,
	};

	/** –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–∞ */
	class AutoRater {
		constructor() {
			this.isProcessing = false;
			this.observer = null;
			this.intervalId = null;
			this.widget = null;
			this.isCollapsed = false;

			// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
			this.rangeStart = null;
			this.rangeEnd = null;

			// –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
			this.setupRangeSelection();

			this.init();
		}

		/** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ */
		init() {
			this.setPageZoom();
			this.setupObservers();
			this.initialCheck();

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
			if (this.isProgressPage()) {
				this.initAttendanceStats();
			}

			// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π URL –¥–ª—è SPA
			this.setupNavigationObserver();
		}

		/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ¬´–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ¬ª –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ */
		setupRangeSelection() {
			document.body.addEventListener('click', e => {
				// –ò—â–µ–º –æ–±—ë—Ä—Ç–∫—É ¬´–ø–∞—Ä—ã¬ª
				const lesson = e.target.closest(
					'.lessons, .lessons.lateness, .lessons.pass'
				);
				if (!lesson) return;

				// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–∞—Ä—ã
				const dateEl = lesson.querySelector('.date');
				if (!dateEl) return;
				const [day, month, year] = dateEl.textContent
					.trim()
					.split('.')
					.map(Number);
				const lessonDate = new Date(year, month - 1, day);

				if (e.shiftKey) {
					// –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ Shift+LKM ‚Äî –≤—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞
					this.rangeEnd = lessonDate;
				} else {
					// –ü—Ä–æ—Å—Ç–æ–µ LKM ‚Äî –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
					this.rangeStart = lessonDate;
					this.rangeEnd = null;
				}

				// –ï—Å–ª–∏ –æ–±–µ —Ç–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –∏ —Å—Ç–æ—è—Ç –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ ‚Äî –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
				if (this.rangeStart && this.rangeEnd) {
					if (this.rangeStart > this.rangeEnd) {
						[this.rangeStart, this.rangeEnd] = [this.rangeEnd, this.rangeStart];
					}
				}

				// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ –≤–∏–¥–∂–µ—Ç–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
				this.applyRangeToWidget();
				this.updateAttendanceStats();

				// –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
				this.highlightRange();
			});
		}

		/** –ó–∞–ø–æ–ª–Ω—è–µ—Ç date-–∏–Ω–ø—É—Ç—ã –≤ –≤–∏–¥–∂–µ—Ç–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É */
		applyRangeToWidget() {
			if (!this.widget) return;
			const format = d => {
				const y = d.getFullYear();
				const m = String(d.getMonth() + 1).padStart(2, '0');
				const day = String(d.getDate()).padStart(2, '0');
				return `${y}-${m}-${day}`;
			};
			const fromInput = this.widget.querySelector('#date-from');
			const toInput = this.widget.querySelector('#date-to');
			if (this.rangeStart) fromInput.value = format(this.rangeStart);
			if (this.rangeEnd) toInput.value = format(this.rangeEnd);
		}

		/** –î–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –º–µ—Ç–∫–∏ ¬´start¬ª, ¬´in¬ª, ¬´end¬ª —É —É—Ä–æ–∫–æ–≤ */
		highlightRange() {
			// –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏
			document.querySelectorAll('.range-badge').forEach(b => b.remove());

			if (!(this.rangeStart && this.rangeEnd)) return;

			// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
			const lessons = Array.from(
				document.querySelectorAll('.lessons, .lessons.lateness, .lessons.pass')
			)
				.map(lesson => {
					const dateEl = lesson.querySelector('.date');
					if (!dateEl) return null;
					const [d, m, y] = dateEl.textContent.trim().split('.').map(Number);
					const dt = new Date(y, m - 1, d);
					return { lesson, dt };
				})
				.filter(
					item => item && item.dt >= this.rangeStart && item.dt <= this.rangeEnd
				);

			// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ ‚Äî start, in –∏–ª–∏ end
			lessons.forEach(({ lesson, dt }) => {
				let label;
				if (dt.getTime() === this.rangeStart.getTime()) {
					label = 'start';
				} else if (dt.getTime() === this.rangeEnd.getTime()) {
					label = 'end';
				} else {
					label = 'in';
				}

				// –°–æ–∑–¥–∞—ë–º –±–µ–π–¥–∂
				lesson.style.position = lesson.style.position || 'relative';
				const badge = document.createElement('div');
				badge.className = 'range-badge';
				badge.textContent = label;
				Object.assign(badge.style, {
					position: 'absolute',
					bottom: '2px',
					left: '2px',
					backgroundColor: 'rgba(0, 128, 0, 0.7)',
					color: '#fff',
					padding: '2px 4px',
					fontSize: '10px',
					borderRadius: '3px',
					pointerEvents: 'none',
				});
				lesson.appendChild(badge);
			});
		}

		/** –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */
		isProgressPage() {
			return CONFIG.PROGRESS_PAGE_REGEX.test(window.location.href);
		}

		/** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ */
		initAttendanceStats() {
			this.createAttendanceWidget();
			this.updateAttendanceStats = this.debounce(
				this.updateAttendanceStats.bind(this),
				300
			);
			// this.setupAttendanceObserver();
			this.updateAttendanceStats(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
		}

		/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ */
		setupAttendanceObserver() {
			const targetNode =
				document.querySelector('#attendance-anchor') || document.body;
			new MutationObserver(() => {
				this.updateAttendanceStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
			}).observe(targetNode, { childList: true, subtree: true });
		}

		/** –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ */
		checkAndUpdateWidget() {
			if (this.isProgressPage()) {
				if (!this.widget) {
					this.createAttendanceWidget();
				}
				this.updateAttendanceStats();
			} else {
				this.removeAttendanceWidget();
			}
		}

		/** –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ */
		createAttendanceWidget() {
			if (document.getElementById('attendance-stats')) return;

			this.widget = document.createElement('div');
			this.widget.id = 'attendance-stats';
			Object.assign(this.widget.style, {
				position: 'fixed',
				top: '10%',
				right: '10px',
				backgroundColor: '#fff',
				padding: '10px',
				border: '1px solid #ccc',
				borderRadius: '5px',
				zIndex: '9999',
				boxShadow: '0 2px 5px rgba(0,0,0,0.2)',
				fontSize: '14px',
				width: '220px', // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
				transition: 'width 0.2s, padding 0.2s',
			});

			this.widget.innerHTML = `
        <div style="display:flex; align-items:center; justify-content:space-between;">
            <strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</strong>
            <button id="toggle-stats"
                    title="–°–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
                    style="background:none; border:none; cursor:pointer; font-size:14px; line-height:1; padding:0;">
                ‚ØÜ
            </button>
        </div>
        <div class="stats-body" style="margin-top:8px;">
            <label>–°: <input type="date" id="date-from"></label><br>
            <label>–ü–æ: <input type="date" id="date-to"></label><br>
            <button id="reset-stats" style="margin-top:6px;">–°–±—Ä–æ—Å–∏—Ç—å</button>
            <button id="refresh-stats" title="–û–±–Ω–æ–≤–∏—Ç—å"
                    style="margin-top:6px; margin-left:4px; font-size:12px; line-height:1; padding:2px 4px; cursor:pointer;">
                ‚Üª
            </button>
            <div id="stats-content" style="margin-top:8px">
                –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: 0<br>
                –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: 0<br>
                –û–ø–æ–∑–¥–∞–Ω–∏—è: 0<br>
                –ü—Ä–æ–ø—É—Å–∫–∏: 0<br>
                –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: <b>0%</b>
            </div>
        </div>
    `;
			document.body.appendChild(this.widget);

			// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è
			const now = new Date();
			const yyyy = now.getFullYear();
			const mm = String(now.getMonth() + 1).padStart(2, '0');
			const dd = String(now.getDate()).padStart(2, '0');
			const todayStr = `${yyyy}-${mm}-${dd}`;
			const firstOfMonthStr = `${yyyy}-${mm}-01`;

			this.widget.querySelector('#date-from').value = firstOfMonthStr;
			this.widget.querySelector('#date-to').value = todayStr;

			// –ö–µ—à–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
			const btn = this.widget.querySelector('#toggle-stats');
			const headerLabel = this.widget.querySelector('strong');
			const body = this.widget.querySelector('.stats-body');

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
			btn.addEventListener('click', () => {
				this.isCollapsed = !this.isCollapsed;

				if (this.isCollapsed) {
					headerLabel.style.display = 'none';
					body.style.display = 'none';
					this.widget.style.width = 'auto';
					this.widget.style.padding = '4px';
					btn.textContent = '‚Øà';
				} else {
					headerLabel.style.display = '';
					body.style.display = '';
					this.widget.style.width = '220px';
					this.widget.style.padding = '10px';
					btn.textContent = '‚ØÜ';
				}
			});

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
			this.widget
				.querySelector('#date-from')
				.addEventListener('change', () => this.updateAttendanceStats());
			this.widget
				.querySelector('#date-to')
				.addEventListener('change', () => this.updateAttendanceStats());
			this.widget
				.querySelector('#reset-stats')
				.addEventListener('click', () => {
					this.widget.querySelector('#date-from').value = firstOfMonthStr;
					this.widget.querySelector('#date-to').value = todayStr;
					this.rangeStart = null;
					this.rangeEnd = null;
					document.querySelectorAll('.range-badge').forEach(b => b.remove());
					this.updateAttendanceStats();
				});
			this.widget
				.querySelector('#refresh-stats')
				.addEventListener('click', () => {
					this.updateAttendanceStats();
					this.highlightRange();
				});
		}

		/** –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ */
		removeAttendanceWidget() {
			if (this.widget && this.widget.parentNode) {
				this.widget.parentNode.removeChild(this.widget);
				this.widget = null;
			}
		}

		/** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ */
		updateAttendanceStats() {
			if (!this.isProgressPage()) {
				this.removeAttendanceWidget();
				return;
			}

			if (!this.widget) {
				this.createAttendanceWidget();
			}

			// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç
			const dateFromInput = this.widget.querySelector('#date-from').value;
			const dateToInput = this.widget.querySelector('#date-to').value;
			// –ü–∞—Ä—Å–∏–º YYYY-MM-DD –∫–∞–∫ –º–µ—Å—Ç–Ω—É—é –ø–æ–ª—É–Ω–æ—á—å
			const parseLocalDate = s => {
				const [y, m, d] = s.split('-').map(Number);
				return new Date(y, m - 1, d);
			};
			const dateFrom = dateFromInput ? parseLocalDate(dateFromInput) : null;
			const dateTo = dateToInput ? parseLocalDate(dateToInput) : null;
			if (dateTo) dateTo.setHours(23, 59, 59, 999);

			// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è
			let lessons = document.querySelectorAll(
				'.lessons, .lessons.lateness, .lessons.pass'
			);

			// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
			lessons = Array.from(lessons).filter(lesson => {
				const dateText = lesson.querySelector('.date')?.textContent.trim();
				if (!dateText) return false;
				const [d, m, y] = dateText.split('.').map(Number);
				const ld = new Date(y, m - 1, d);
				return (!dateFrom || ld >= dateFrom) && (!dateTo || ld <= dateTo);
			});

			// –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
			const total = lessons.length;
			const lateness = lessons.filter(lesson =>
				lesson.classList.contains('lateness')
			).length;
			const present =
				lateness +
				lessons.filter(
					lesson =>
						!lesson.classList.contains('pass') &&
						!lesson.classList.contains('lateness')
				).length;
			const absent = lessons.filter(lesson =>
				lesson.classList.contains('pass')
			).length;

			const attendancePercentage =
				total > 0 ? ((present / total) * 100).toFixed(1) : 0;

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∏–¥–∂–µ—Ç–∞
			if (this.widget) {
				const statsContent = this.widget.querySelector('#stats-content');
				statsContent.innerHTML = `
                  –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: ${total}<br>
                  –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: ${present}<br>
                  –û–ø–æ–∑–¥–∞–Ω–∏—è: ${lateness}<br>
                  –ü—Ä–æ–ø—É—Å–∫–∏: ${absent}<br>
                  –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: <b>${attendancePercentage}%</b>
              `;
			}
		}

		/** –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ */
		debounce(func, wait) {
			let timeout;
			return (...args) => {
				clearTimeout(timeout);
				timeout = setTimeout(() => func.apply(this, args), wait);
			};
		}

		/** –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
		setPageZoom() {
			document.documentElement.style.zoom = CONFIG.ZOOM_LEVEL;
		}

		/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π */
		setupNavigationObserver() {
			let lastUrl = window.location.href;
			new MutationObserver(() => {
				const currentUrl = window.location.href;
				if (currentUrl !== lastUrl) {
					lastUrl = currentUrl;
					this.checkAndUpdateWidget();
				}
			}).observe(document.body, { childList: true, subtree: true });

			// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ popstate
			window.addEventListener('popstate', () => {
				this.checkAndUpdateWidget();
			});
		}

		/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π */
		setupObservers() {
			this.observer = new MutationObserver(() => this.handleModal());
			this.observer.observe(document.body, CONFIG.OBSERVER_CONFIG);
			this.intervalId = setInterval(
				() => this.handleModal(),
				CONFIG.CHECK_INTERVAL
			);
		}

		/** –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ */
		initialCheck() {
			this.handleModal();
		}

		/** –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω */
		handleModal() {
			if (this.shouldSkipProcessing()) return;
			this.isProcessing = true;

			try {
				if (this.processRating()) {
					this.scheduleNextButtonClick();
				} else if (this.isRatingAlreadySet()) {
					this.clickNextButton();
				}
			} finally {
				this.isProcessing = false;
			}
		}

		/** –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ */
		shouldSkipProcessing() {
			return this.isProcessing || !this.isModalVisible();
		}

		/** –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
		isModalVisible() {
			const modal = document.querySelector('modal-container');
			return modal && modal.style.display !== 'none';
		}

		/** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ */
		processRating() {
			const ratingElement = this.findRatingElement();
			if (!ratingElement) return false;

			this.clickRating(ratingElement);
			return true;
		}

		/** –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ */
		findRatingElement() {
			return document.querySelector(
				`span.bs-rating-star[title="${CONFIG.TARGET_RATING}"]:not(.active)`
			);
		}

		/** –ö–ª–∏–∫ –ø–æ –∑–≤—ë–∑–¥–æ—á–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ */
		clickRating(element) {
			const button = element.querySelector('button.rating-star');
			if (button) {
				button.click();
				console.log(`–ù–∞–∂–∞—Ç–∞ ${CONFIG.TARGET_RATING}-–∑–≤—ë–∑–¥–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞`);
			}
		}

		/** –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ */
		isRatingAlreadySet() {
			return !!document.querySelector(
				`span.bs-rating-star[title="${CONFIG.TARGET_RATING}"].active`
			);
		}

		/** –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–î–∞–ª–µ–µ" */
		scheduleNextButtonClick() {
			setTimeout(() => this.clickNextButton(), CONFIG.CLICK_DELAY);
		}

		/** –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */
		clickNextButton() {
			const button = this.findNextButton();
			if (button) {
				button.click();
				console.log(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "${button.textContent.trim()}"`);
				return true;
			}
			return false;
		}

		/** –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */
		findNextButton() {
			return Array.from(
				document.querySelectorAll('button.btn.btn-default')
			).find(btn => CONFIG.NEXT_BUTTON_TEXTS.includes(btn.textContent.trim()));
		}

		/** –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ */
		cleanup() {
			if (this.observer) this.observer.disconnect();
			if (this.intervalId) clearInterval(this.intervalId);
			this.removeAttendanceWidget();
		}
	}

	// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
	const autoRater = new AutoRater();

	// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	window.addEventListener('unload', () => {
		autoRater.cleanup();
	});
})();
